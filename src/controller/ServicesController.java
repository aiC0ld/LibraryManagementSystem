package controller;

import java.util.List;
import model.*;
import view.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.ArrayList;

/**
 * The ServicesController class is responsible for handling user interactions with
 * the BookItems in the system. It connects the Service view with the Services
 * model, and implements ActionListener to respond to events generated by the
 * user interface. This class provides methods to add, update, delete, search,
 * borrow, and return books, and displays success or error messages to the user.
 */
public class ServicesController {

  private ServicesModel model;
  private ServicesView view;

  /**
   * Constructs a BookController object.
   *
   * @param model a Services object representing the model in the MVC
   *              architecture
   * @param view  a BooksView object representing the view in the MVC
   *              architecture
   */
  public ServicesController(ServicesModel model, ServicesView view) {
    this.model = model;
    this.view = view;

    view.addBookListener(new AddBookListener());
    view.updateBookListener(new UpdateBookListener());
    view.deleteBookListener(new DeleteBookListener());
    view.searchBookListener(new SearchBookListener());
    view.resetBookListener(new ResetBookListener());
    view.loanBookListener(new LoanBookListener());
    view.returnBookListener(new ReturnBookListener());

    boolean loaded = model.loadBooks();
    if (!loaded) {
      view.displayErrorMessage("Failed to load books from file");
    }
    view.displayBooks(model.getAllBooks());
  }

  /**
   * An ActionListener that adds a book to the library management system.
   */
  class AddBookListener implements ActionListener {

    public void actionPerformed(ActionEvent e) {
      String id = view.getBookItemID();
      String ISBN = view.getBookItemISBN();
      String title = view.getBookItemTitle();
      String author = view.getBookItemAuthor();
      String subject = view.getBookItemSubject();
      double price = view.getBookItemPrice();
      if (price == -1) {
        view.clearForm();
        return;
      }
      if (model.getBookItemByID(id) != null) {
        view.displayErrorMessage("The ID is already exists.");
        view.clearForm();
      }
      else {
        BookItem bookItem = new BookItem(id, ISBN, title, author, subject, price);
        model.addBookItem(bookItem);
        view.displaySuccessMessage("Book added successfully.");
        view.clearForm();
        view.displayBooks(model.getAllBooks());
      }
    }
  }

  /**
   * An ActionListener that updates a book in the library management system.
   */
  class UpdateBookListener implements ActionListener {

    public void actionPerformed(ActionEvent e) {
      List<BookItem> selectedBookItem = getSelectedBookItems();
      if (selectedBookItem.size() > 1 || selectedBookItem.size() == 0) {
        view.displayErrorMessage("Must select one book to update");
      }
      BookItem bookItem = selectedBookItem.get(0);
      String id = view.getBookItemID();
      String ISBN = view.getBookItemISBN();
      String title = view.getBookItemTitle();
      String author = view.getBookItemAuthor();
      String subject = view.getBookItemSubject();
      double price = view.getBookItemPrice();
      if (model.getBookItemByID(id) != null) {
        view.displayErrorMessage("The ID is already exists.");
        view.clearForm();
      }
      else {
        model.updateBookItem(bookItem, id, ISBN, title, author, subject, price);
        view.displaySuccessMessage("Book updated successfully.");
        view.clearForm();
        view.displayBooks(model.getAllBooks());
      }
    }
  }

  /**
   * An ActionListener that deletes a book from the library management system.
   */
  class DeleteBookListener implements ActionListener {

    public void actionPerformed(ActionEvent e) {
      List<BookItem> selectedBookItem = getSelectedBookItems();
      if (selectedBookItem.size() == 0) {
        view.displayErrorMessage("Select at least one book to delete");
        return;
      } else {
        boolean delete = model.deleteBookItem(selectedBookItem);
        if (delete) {
          view.displaySuccessMessage("Book deleted successfully.");
        }
      }
      view.displayBooks(model.getAllBooks());
      view.clearForm();
    }
  }

  /**
   * An ActionListener that searches for books in the library management system
   * based on user input.
   */
  class SearchBookListener implements ActionListener {

    public void actionPerformed(ActionEvent e) {
      String id = view.getBookItemID();
      String ISBN = view.getBookItemISBN();
      String title = view.getBookItemTitle();
      String author = view.getBookItemAuthor();
      String subject = view.getBookItemSubject();
      double price = view.getBookItemPrice();
      ArrayList<BookItem> searchedBookItem = model.searchBookItem(id, ISBN,
          title, author, subject, price);
      view.displayBooks(searchedBookItem);
    }
  }

  /**
   * An ActionListener that clears the form and displays all books in the
   * library management system.
   */
  class ResetBookListener implements ActionListener {

    public void actionPerformed(ActionEvent e) {
      view.clearForm();
      view.displayBooks(model.getAllBooks());
    }
  }

  /**
   * Once the "Loan" button is clicked, the ActionListener allows the user to
   * select one or more books to loan from the library management system.
   */
  class LoanBookListener implements ActionListener {

    public void actionPerformed(ActionEvent e) {
      List<BookItem> selectedBookItem = getSelectedBookItems();
      if (selectedBookItem.size() == 0) {
        // error checks for invalid cases
        view.displayErrorMessage("Select at least one book to borrow");
        return;
      }
      for (BookItem b : selectedBookItem) {
        if (!b.isAvailable()) {
          view.displayErrorMessage("Book is unavailable");
          return;
        }
        model.loanBookItem(b);
      }
      // response to the user interface
      view.displaySuccessMessage("Book loaned successfully.");
      view.displayBooks(model.getAllBooks());
    }
  }

  /**
   * An ActionListener that allows the user to return one or more books to the
   * library management system.
   */
  class ReturnBookListener implements ActionListener {

    public void actionPerformed(ActionEvent e) {
      List<BookItem> selectedBookItem = getSelectedBookItems();
      if (selectedBookItem.size() == 0) {
        view.displayErrorMessage("Select at least one book to return");
        return;
      }
      for (BookItem b : selectedBookItem) {
        if (b.isAvailable()) {
          view.displayErrorMessage("Can not return the book");
          return;
        }
        model.returnBookItem(b);
      }
      view.displaySuccessMessage("Book returned successfully.");
      view.displayBooks(model.getAllBooks());
    }
  }

  /**
   * Returns a list of selected book items based on user input.
   *
   * @return a List of BookItem objects representing the selected books
   */
  public List<BookItem> getSelectedBookItems() {
    return model.getBookItemsByIDs(view.getSelectedBookItemIDs());
  }
}
